# -*- coding: utf-8 -*-
"""Functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zSas4B2L5KJvIAOo1ZVrdnQtjeROhU1l
"""

# 1. Write a Python function to find the maximum of three numbers.
def max_2 (x, y):
  if x > y:
    return x
  return y

def max_3 (x, y, z):
   return max_2(x, max_2(y, z))
print(max_3(2, 4, 6))

# 2. Write a Python function to sum all the numbers in a list.
def sum(num):
    total = 0
    for x in num:
        total += x
    return total
print(sum((1, 2, 3, 4, 5)))

# 3. Write a Python function to multiply all the numbers in a list.
def multiply(num):
      total = 1
      for x in num:
        total *= x
      return total
print(multiply((1,2,3,4,5)))

# 4. Write a Python program to reverse a string.
def reverse(string1):
  reversestring1 = ''
  index = len(string1)
  while index > 0:
    reversestring1 += string1[index - 1]
    index = index - 1
  return reversestring1
print (reverse('1234abcd'))

# 5. Write a Python function to calculate the factorial of a number (a
# non-negative integer). The function accepts the number as an argument.
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)
n = int(input("Calculate the factorial of\n"))
print(factorial(n))

# 6. Write a Python function to check whether a number falls within a given
# range.
def test_range(n, s, e, inclusive=True):
    if inclusive:
        return s <= n <= e
    else:
        return s < n < e
n = 10
s = 5
e = 20

print(test_range(n,s,e))

# 7. Write a Python function that accepts a string and counts the number of upper and lower case letters.
def string_test(s):
    d = {"UPPER_CASE": 0, "LOWER_CASE": 0}
    for c in s:
        if c.isupper():
            d["UPPER_CASE"] += 1
        elif c.islower():
            d["LOWER_CASE"] += 1
        else:
            pass
    print("String: ", s)
    print("Upper case: ", d["UPPER_CASE"])
    print("Lower case: ", d["LOWER_CASE"])
string_test('Hello Whats up')

# 8. Write a Python function that takes a list and returns a new list with distinct elements from the first list.
def unique_list(l):
    x = []
    for a in l:
        if a not in x:
            x.append(a)
    return x
print(unique_list([1, 1, 1, 2, 3, 3, 4, 4, 4, 5]))

# 9. Write a Python function that takes a number as a parameter and checks whether the number is prime or not.
def test_prime(n):
    if (n == 1):
        return False
    elif (n == 2):
        return True
    else:
        for x in range(2, n):
            if (n % x == 0):
                return False
        return True
print(test_prime(7))

# 10. Write a Python program to print the even numbers from a given list.
def even_numbers(lst):
    return [num for num in lst if num % 2 == 0]

x = [6, 7, 123, 522]
print(even_numbers(x))

# 11. Write a Python function to check whether a number is "Perfect" or not.
def is_perfect(n):
    return n == sum(i for i in range(1, n) if n % i == 0)

print(is_perfect(2))

# 12. Write a Python function that checks whether a passed string is a palindrome or not.
def is_palindrome(s):
    return s == s[::-1]

print(is_palindrome("madam"))

# 13. Write a Python function that prints out the first n rows of Pascal's triangle.
def pascal_triangle(n):
    trow = [1]
    y = [0]
    for x in range(max(n, 0)):
        print(trow)
        trow = [l + r for l, r in zip(trow + y, y + trow)]
    return n >= 1
pascal_triangle(7)

# 14. Write a Python function to check whether a string is a pangram or not.
import string
def is_pangram(s):
    return set(string.ascii_lowercase).issubset(set(s.lower()))

print(is_pangram("I don't know"))

# 15. Write a Python program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated sequence after sorting them alphabetically.
items = [n for n in input().split('-')]
items.sort()
print('-'.join(items))

# 16. Write a Python function to create and print a list where the values are the squares of numbers between 1 and 30 (both included).
def square_list():
    return [i ** 2 for i in range(1, 31)]
print(square_list())

# 17. Write a Python program to create a chain of function decorators (bold, italic, underline etc.).
def make_bold(fn):
    def wrapped():
        return "<b>" + fn() + "</b>"
    return wrapped
def make_italic(fn):
    def wrapped():
        return "<i>" + fn() + "</i>"
    return wrapped
def make_underline(fn):
    def wrapped():
        return "<u>" + fn() + "</u>"
    return wrapped
@make_bold
@make_italic
@make_underline
def hello():
    return "hello world"
print(hello())

# 18. Write a Python program to execute a string containing Python code.
mycode = 'print("hello world")'
code = """
def mutiply(x,y):
    return x*y
print('Multiply of 2 and 3 is: ',mutiply(2,3))
"""
exec(mycode)
exec(code)

# 19. Write a Python program to access a function inside a function.
def test(a):
    def add(b):
        nonlocal a
        a += 1
        return a + b
    return add
func = test(4)
print(func(4))

# 20. Write a Python program to detect the number of local variables declared in a function.
# Define a function named 'abc'
def abc():
    x = 1
    y = 2
    str1 = "w3resource"
    print("Python Exercises")
print(abc.__code__.co_nlocals)

# 21. Write a Python program that invokes a function after a specified period of time.
def abc():
    x = 1
    y = 2
    str1 = "w3resource"
    print("Python Exercises")
print(abc.__code__.co_nlocals)