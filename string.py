# -*- coding: utf-8 -*-
"""String.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d31iNG_hOCKYgcdL7Exh3QXfF6aIUNJe
"""

# 1. Write a Python program to calculate the length of a string.
def string_length(string):
    count = 0
    for char in string:
        count += 1
    return count

print('String length is :', string_length('sampleString'))

# 2. Write a Python program to count the number of characters (character frequency) in a string.
def char_frequency(string):
    dict = {}
    for n in string:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1

    return dict

print(char_frequency('WSB-Merito'))

# 3. Write a Python program to get a string made of the first 2 and last 2 characters of a given string.
# If the string length is less than 2, return the empty string instead.
def string_both_ends(str):
    if len(str) < 2:
        return ''
    else:
        return str[0:2] + str[-2:]

print(string_both_ends('przykladoweslowo'))
print(string_both_ends('12'))
print(string_both_ends('1'))

# 4. Write a Python program to get a string from a given string where all occurrences of its first char
# have been changed to '$', except the first char itself.
def change_char(string):
    char = string[0]
    string = string.replace(char, '$')
    string = char + string[1:]
    return string

print(change_char('restart'))

# 5.Write a Python program to get a single string from two given strings,
# separated by a space and swap the first two characters of each string.
def chars_mix_up(a, b):
    new_a = b[:2] + a[2:]
    new_b = a[:2] + b[2:]
    return new_a + ' ' + new_b

print(chars_mix_up('abc', 'xyz'))

# 6. Write a Python program to add 'ing' at the end of a given string (length should be at least 3).
# If the given string already ends with 'ing', add 'ly' instead.
# If the string length of the given string is less than 3, leave it unchanged.
def add_string(str1):
    length = len(str1)
    if length > 2:
        if str1[-3:] == 'ing':
            str1 += 'ly'
        else:
            str1 += 'ing'

    return str1
print(add_string('ab'))
print(add_string('abc'))
print(add_string('string'))

# 7. Write a Python program to find the first appearance of the substrings 'not' and 'poor' in a given string.
# If 'not' follows 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.
def not_poor(str1):
    snot = str1.find('not')
    spoor = str1.find('poor')
    if spoor > snot and snot > 0 and spoor > 0:
        str1 = str1.replace(str1[snot:(spoor+4)], 'good')
        return str1
    else:
        return str1

print(not_poor('The lyrics is not that poor!'))
print(not_poor('The lyrics is poor!'))

# 8. Write a Python function that takes a list of words and return the longest word and the length of the longest one.
def longest_word(words):
    longest = words[0]
    longest_length = len(longest)

    for word in words[1:]:
        if len(word) > longest_length:
            longest = word
            longest_length = len(word)

    return longest, longest_length

word_list = ['Ola', 'Asia', 'Basia', 'Agnieszka']
longest_word, length = longest_word(word_list)
print("Longest word:", longest_word)
print("Length of the longest word:", length)

# 9. Write a Python program to remove the nth index character from a nonempty string.
def remove_nth_char(string, n):
    return string[:n] + string[n+1:]

inputString = "string"
indexToRemove = 2
result = remove_nth_char(inputString, indexToRemove)
print("After removing the character at index", indexToRemove, ":", result)

# 10. Write a Python program to change a given string to a newly string where the first and last chars have been exchanged.
def exchange_first_last(string):
    if len(string) <= 1:
        return string
    else:
        return string[-1] + string[1:-1] + string[0]

inputString = "string"
result = exchange_first_last(inputString)
print(result)

# 11. Write a Python program to remove characters that have odd index values in a given string.
def remove_odd_index_chars(string):
    return string[::2]

input_string = "string"
result = remove_odd_index_chars(input_string)
print(result)

# 12. Write a Python program to count the occurrences of each word in a given sentence.
def count_word_occurrences(sentence):
    word_counts = {}
    words = sentence.split()

    for word in words:
        if word in word_counts:
            word_counts[word] += 1
        else:
            word_counts[word] = 1

    return word_counts

input_sentence = "What is going on?"
word_occurrences = count_word_occurrences(input_sentence)
print("Word occurrences:", word_occurrences)

# 13. Write a Python script that takes input from the user and displays that input back in upper and lower cases.
user_input = input("Enter a string: ")
print("Input in upper case:", user_input.upper())
print("Input in lower case:", user_input.lower())

# 14. Write a Python program that accepts a comma-separated sequence of words as input and prints the distinct words in sorted form (alphanumerically).
def sorted_distinct_words(sequence):
    words = sequence.split(",")
    distinct_words = sorted(set(words))
    return distinct_words

input_sequence = input("Enter a comma-separated sequence of words: ")
result = sorted_distinct_words(input_sequence)
print("Distinct words in sorted form:", ", ".join(result))

# 15. Write a Python function to create an HTML string with tags around the word(s).
def add_html_tags(text, tag):
    return f"<{tag}>{text}</{tag}>"

word = "bla"
tag = "pl"
html_string = add_html_tags(word, tag)
print(html_string)

# (16) 57. Write a Python program to remove spaces from a given string.
def remove_spaces(string):
    return string.replace(" ", "")

input_string = "Sample string example."
result = remove_spaces(input_string)
print("String after removing spaces:", result)

# (17) 35. Write a Python program to display a number with a comma separator.
def format_with_commas(number):
    return "{:,}".format(number)

number = 213737
formatted_number = format_with_commas(number)
print("Number with comma separator:", formatted_number)

# (18) 39. Write a Python program to reverse a string.
def reverse_string(string):
    return string[::-1]

input_string = input("Enter a string: ")
reversed_string = reverse_string(input_string)
print("Reversed string:", reversed_string)

# (19) 40. Write a Python program to reverse words in a string.
def reverse_words(string):
    words = string.split()
    reversed_words = words[::-1]
    reversed_string = ' '.join(reversed_words)
    return reversed_string

input_string = input("Enter a string: ")
reversed_string = reverse_words(input_string)
print("String with reversed words:", reversed_string)

# (20) 62. Write a Python program to compute the sum of the digits in a given string.
def sum_of_digits(string):
    total_sum = 0
    for char in string:
        if char.isdigit():
            total_sum += int(char)
    return total_sum

input_string = input("Enter a string: ")
result = sum_of_digits(input_string)
print("Sum of digits in the string:", result)